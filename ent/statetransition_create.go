// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-fsm/ent/statemachine"
	"go-fsm/ent/statetransition"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StateTransitionCreate is the builder for creating a StateTransition entity.
type StateTransitionCreate struct {
	config
	mutation *StateTransitionMutation
	hooks    []Hook
}

// SetFromState sets the "from_state" field.
func (stc *StateTransitionCreate) SetFromState(s string) *StateTransitionCreate {
	stc.mutation.SetFromState(s)
	return stc
}

// SetToState sets the "to_state" field.
func (stc *StateTransitionCreate) SetToState(s string) *StateTransitionCreate {
	stc.mutation.SetToState(s)
	return stc
}

// SetEvent sets the "event" field.
func (stc *StateTransitionCreate) SetEvent(s string) *StateTransitionCreate {
	stc.mutation.SetEvent(s)
	return stc
}

// SetTimestamp sets the "timestamp" field.
func (stc *StateTransitionCreate) SetTimestamp(t time.Time) *StateTransitionCreate {
	stc.mutation.SetTimestamp(t)
	return stc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (stc *StateTransitionCreate) SetNillableTimestamp(t *time.Time) *StateTransitionCreate {
	if t != nil {
		stc.SetTimestamp(*t)
	}
	return stc
}

// SetMachineID sets the "machine" edge to the StateMachine entity by ID.
func (stc *StateTransitionCreate) SetMachineID(id int) *StateTransitionCreate {
	stc.mutation.SetMachineID(id)
	return stc
}

// SetNillableMachineID sets the "machine" edge to the StateMachine entity by ID if the given value is not nil.
func (stc *StateTransitionCreate) SetNillableMachineID(id *int) *StateTransitionCreate {
	if id != nil {
		stc = stc.SetMachineID(*id)
	}
	return stc
}

// SetMachine sets the "machine" edge to the StateMachine entity.
func (stc *StateTransitionCreate) SetMachine(s *StateMachine) *StateTransitionCreate {
	return stc.SetMachineID(s.ID)
}

// Mutation returns the StateTransitionMutation object of the builder.
func (stc *StateTransitionCreate) Mutation() *StateTransitionMutation {
	return stc.mutation
}

// Save creates the StateTransition in the database.
func (stc *StateTransitionCreate) Save(ctx context.Context) (*StateTransition, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *StateTransitionCreate) SaveX(ctx context.Context) *StateTransition {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *StateTransitionCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *StateTransitionCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *StateTransitionCreate) defaults() {
	if _, ok := stc.mutation.Timestamp(); !ok {
		v := statetransition.DefaultTimestamp()
		stc.mutation.SetTimestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *StateTransitionCreate) check() error {
	if _, ok := stc.mutation.FromState(); !ok {
		return &ValidationError{Name: "from_state", err: errors.New(`ent: missing required field "StateTransition.from_state"`)}
	}
	if _, ok := stc.mutation.ToState(); !ok {
		return &ValidationError{Name: "to_state", err: errors.New(`ent: missing required field "StateTransition.to_state"`)}
	}
	if _, ok := stc.mutation.Event(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required field "StateTransition.event"`)}
	}
	if _, ok := stc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "StateTransition.timestamp"`)}
	}
	return nil
}

func (stc *StateTransitionCreate) sqlSave(ctx context.Context) (*StateTransition, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *StateTransitionCreate) createSpec() (*StateTransition, *sqlgraph.CreateSpec) {
	var (
		_node = &StateTransition{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(statetransition.Table, sqlgraph.NewFieldSpec(statetransition.FieldID, field.TypeInt))
	)
	if value, ok := stc.mutation.FromState(); ok {
		_spec.SetField(statetransition.FieldFromState, field.TypeString, value)
		_node.FromState = value
	}
	if value, ok := stc.mutation.ToState(); ok {
		_spec.SetField(statetransition.FieldToState, field.TypeString, value)
		_node.ToState = value
	}
	if value, ok := stc.mutation.Event(); ok {
		_spec.SetField(statetransition.FieldEvent, field.TypeString, value)
		_node.Event = value
	}
	if value, ok := stc.mutation.Timestamp(); ok {
		_spec.SetField(statetransition.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if nodes := stc.mutation.MachineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statetransition.MachineTable,
			Columns: []string{statetransition.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statemachine.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.state_machine_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StateTransitionCreateBulk is the builder for creating many StateTransition entities in bulk.
type StateTransitionCreateBulk struct {
	config
	err      error
	builders []*StateTransitionCreate
}

// Save creates the StateTransition entities in the database.
func (stcb *StateTransitionCreateBulk) Save(ctx context.Context) ([]*StateTransition, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*StateTransition, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StateTransitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *StateTransitionCreateBulk) SaveX(ctx context.Context) []*StateTransition {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *StateTransitionCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *StateTransitionCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
