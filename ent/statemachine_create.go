// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-fsm/ent/statemachine"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StateMachineCreate is the builder for creating a StateMachine entity.
type StateMachineCreate struct {
	config
	mutation *StateMachineMutation
	hooks    []Hook
}

// SetMachineID sets the "machine_id" field.
func (smc *StateMachineCreate) SetMachineID(s string) *StateMachineCreate {
	smc.mutation.SetMachineID(s)
	return smc
}

// SetCurrentState sets the "current_state" field.
func (smc *StateMachineCreate) SetCurrentState(s string) *StateMachineCreate {
	smc.mutation.SetCurrentState(s)
	return smc
}

// Mutation returns the StateMachineMutation object of the builder.
func (smc *StateMachineCreate) Mutation() *StateMachineMutation {
	return smc.mutation
}

// Save creates the StateMachine in the database.
func (smc *StateMachineCreate) Save(ctx context.Context) (*StateMachine, error) {
	return withHooks(ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *StateMachineCreate) SaveX(ctx context.Context) *StateMachine {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *StateMachineCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *StateMachineCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *StateMachineCreate) check() error {
	if _, ok := smc.mutation.MachineID(); !ok {
		return &ValidationError{Name: "machine_id", err: errors.New(`ent: missing required field "StateMachine.machine_id"`)}
	}
	if v, ok := smc.mutation.MachineID(); ok {
		if err := statemachine.MachineIDValidator(v); err != nil {
			return &ValidationError{Name: "machine_id", err: fmt.Errorf(`ent: validator failed for field "StateMachine.machine_id": %w`, err)}
		}
	}
	if _, ok := smc.mutation.CurrentState(); !ok {
		return &ValidationError{Name: "current_state", err: errors.New(`ent: missing required field "StateMachine.current_state"`)}
	}
	if v, ok := smc.mutation.CurrentState(); ok {
		if err := statemachine.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "StateMachine.current_state": %w`, err)}
		}
	}
	return nil
}

func (smc *StateMachineCreate) sqlSave(ctx context.Context) (*StateMachine, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *StateMachineCreate) createSpec() (*StateMachine, *sqlgraph.CreateSpec) {
	var (
		_node = &StateMachine{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(statemachine.Table, sqlgraph.NewFieldSpec(statemachine.FieldID, field.TypeInt))
	)
	if value, ok := smc.mutation.MachineID(); ok {
		_spec.SetField(statemachine.FieldMachineID, field.TypeString, value)
		_node.MachineID = value
	}
	if value, ok := smc.mutation.CurrentState(); ok {
		_spec.SetField(statemachine.FieldCurrentState, field.TypeString, value)
		_node.CurrentState = value
	}
	return _node, _spec
}

// StateMachineCreateBulk is the builder for creating many StateMachine entities in bulk.
type StateMachineCreateBulk struct {
	config
	err      error
	builders []*StateMachineCreate
}

// Save creates the StateMachine entities in the database.
func (smcb *StateMachineCreateBulk) Save(ctx context.Context) ([]*StateMachine, error) {
	if smcb.err != nil {
		return nil, smcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*StateMachine, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StateMachineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *StateMachineCreateBulk) SaveX(ctx context.Context) []*StateMachine {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *StateMachineCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *StateMachineCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}
