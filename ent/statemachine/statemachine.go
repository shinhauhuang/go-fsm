// Code generated by ent, DO NOT EDIT.

package statemachine

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the statemachine type in the database.
	Label = "state_machine"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMachineID holds the string denoting the machine_id field in the database.
	FieldMachineID = "machine_id"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// Table holds the table name of the statemachine in the database.
	Table = "state_machines"
)

// Columns holds all SQL columns for statemachine fields.
var Columns = []string{
	FieldID,
	FieldMachineID,
	FieldCurrentState,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// MachineIDValidator is a validator for the "machine_id" field. It is called by the builders before save.
	MachineIDValidator func(string) error
	// CurrentStateValidator is a validator for the "current_state" field. It is called by the builders before save.
	CurrentStateValidator func(string) error
)

// OrderOption defines the ordering options for the StateMachine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMachineID orders the results by the machine_id field.
func ByMachineID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMachineID, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}
