// Code generated by ent, DO NOT EDIT.

package statemachine

import (
	"go-fsm/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldLTE(FieldID, id))
}

// MachineID applies equality check predicate on the "machine_id" field. It's identical to MachineIDEQ.
func MachineID(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldEQ(FieldMachineID, v))
}

// CurrentState applies equality check predicate on the "current_state" field. It's identical to CurrentStateEQ.
func CurrentState(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldEQ(FieldCurrentState, v))
}

// MachineIDEQ applies the EQ predicate on the "machine_id" field.
func MachineIDEQ(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldEQ(FieldMachineID, v))
}

// MachineIDNEQ applies the NEQ predicate on the "machine_id" field.
func MachineIDNEQ(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldNEQ(FieldMachineID, v))
}

// MachineIDIn applies the In predicate on the "machine_id" field.
func MachineIDIn(vs ...string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldIn(FieldMachineID, vs...))
}

// MachineIDNotIn applies the NotIn predicate on the "machine_id" field.
func MachineIDNotIn(vs ...string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldNotIn(FieldMachineID, vs...))
}

// MachineIDGT applies the GT predicate on the "machine_id" field.
func MachineIDGT(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldGT(FieldMachineID, v))
}

// MachineIDGTE applies the GTE predicate on the "machine_id" field.
func MachineIDGTE(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldGTE(FieldMachineID, v))
}

// MachineIDLT applies the LT predicate on the "machine_id" field.
func MachineIDLT(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldLT(FieldMachineID, v))
}

// MachineIDLTE applies the LTE predicate on the "machine_id" field.
func MachineIDLTE(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldLTE(FieldMachineID, v))
}

// MachineIDContains applies the Contains predicate on the "machine_id" field.
func MachineIDContains(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldContains(FieldMachineID, v))
}

// MachineIDHasPrefix applies the HasPrefix predicate on the "machine_id" field.
func MachineIDHasPrefix(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldHasPrefix(FieldMachineID, v))
}

// MachineIDHasSuffix applies the HasSuffix predicate on the "machine_id" field.
func MachineIDHasSuffix(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldHasSuffix(FieldMachineID, v))
}

// MachineIDEqualFold applies the EqualFold predicate on the "machine_id" field.
func MachineIDEqualFold(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldEqualFold(FieldMachineID, v))
}

// MachineIDContainsFold applies the ContainsFold predicate on the "machine_id" field.
func MachineIDContainsFold(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldContainsFold(FieldMachineID, v))
}

// CurrentStateEQ applies the EQ predicate on the "current_state" field.
func CurrentStateEQ(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldEQ(FieldCurrentState, v))
}

// CurrentStateNEQ applies the NEQ predicate on the "current_state" field.
func CurrentStateNEQ(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldNEQ(FieldCurrentState, v))
}

// CurrentStateIn applies the In predicate on the "current_state" field.
func CurrentStateIn(vs ...string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldIn(FieldCurrentState, vs...))
}

// CurrentStateNotIn applies the NotIn predicate on the "current_state" field.
func CurrentStateNotIn(vs ...string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldNotIn(FieldCurrentState, vs...))
}

// CurrentStateGT applies the GT predicate on the "current_state" field.
func CurrentStateGT(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldGT(FieldCurrentState, v))
}

// CurrentStateGTE applies the GTE predicate on the "current_state" field.
func CurrentStateGTE(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldGTE(FieldCurrentState, v))
}

// CurrentStateLT applies the LT predicate on the "current_state" field.
func CurrentStateLT(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldLT(FieldCurrentState, v))
}

// CurrentStateLTE applies the LTE predicate on the "current_state" field.
func CurrentStateLTE(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldLTE(FieldCurrentState, v))
}

// CurrentStateContains applies the Contains predicate on the "current_state" field.
func CurrentStateContains(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldContains(FieldCurrentState, v))
}

// CurrentStateHasPrefix applies the HasPrefix predicate on the "current_state" field.
func CurrentStateHasPrefix(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldHasPrefix(FieldCurrentState, v))
}

// CurrentStateHasSuffix applies the HasSuffix predicate on the "current_state" field.
func CurrentStateHasSuffix(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldHasSuffix(FieldCurrentState, v))
}

// CurrentStateEqualFold applies the EqualFold predicate on the "current_state" field.
func CurrentStateEqualFold(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldEqualFold(FieldCurrentState, v))
}

// CurrentStateContainsFold applies the ContainsFold predicate on the "current_state" field.
func CurrentStateContainsFold(v string) predicate.StateMachine {
	return predicate.StateMachine(sql.FieldContainsFold(FieldCurrentState, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StateMachine) predicate.StateMachine {
	return predicate.StateMachine(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StateMachine) predicate.StateMachine {
	return predicate.StateMachine(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StateMachine) predicate.StateMachine {
	return predicate.StateMachine(sql.NotPredicates(p))
}
