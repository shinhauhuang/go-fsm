// Code generated by ent, DO NOT EDIT.

package statetransition

import (
	"go-fsm/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLTE(FieldID, id))
}

// FromState applies equality check predicate on the "from_state" field. It's identical to FromStateEQ.
func FromState(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldFromState, v))
}

// ToState applies equality check predicate on the "to_state" field. It's identical to ToStateEQ.
func ToState(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldToState, v))
}

// Event applies equality check predicate on the "event" field. It's identical to EventEQ.
func Event(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldEvent, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldTimestamp, v))
}

// FromStateEQ applies the EQ predicate on the "from_state" field.
func FromStateEQ(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldFromState, v))
}

// FromStateNEQ applies the NEQ predicate on the "from_state" field.
func FromStateNEQ(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNEQ(FieldFromState, v))
}

// FromStateIn applies the In predicate on the "from_state" field.
func FromStateIn(vs ...string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldIn(FieldFromState, vs...))
}

// FromStateNotIn applies the NotIn predicate on the "from_state" field.
func FromStateNotIn(vs ...string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNotIn(FieldFromState, vs...))
}

// FromStateGT applies the GT predicate on the "from_state" field.
func FromStateGT(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGT(FieldFromState, v))
}

// FromStateGTE applies the GTE predicate on the "from_state" field.
func FromStateGTE(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGTE(FieldFromState, v))
}

// FromStateLT applies the LT predicate on the "from_state" field.
func FromStateLT(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLT(FieldFromState, v))
}

// FromStateLTE applies the LTE predicate on the "from_state" field.
func FromStateLTE(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLTE(FieldFromState, v))
}

// FromStateContains applies the Contains predicate on the "from_state" field.
func FromStateContains(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldContains(FieldFromState, v))
}

// FromStateHasPrefix applies the HasPrefix predicate on the "from_state" field.
func FromStateHasPrefix(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldHasPrefix(FieldFromState, v))
}

// FromStateHasSuffix applies the HasSuffix predicate on the "from_state" field.
func FromStateHasSuffix(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldHasSuffix(FieldFromState, v))
}

// FromStateEqualFold applies the EqualFold predicate on the "from_state" field.
func FromStateEqualFold(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEqualFold(FieldFromState, v))
}

// FromStateContainsFold applies the ContainsFold predicate on the "from_state" field.
func FromStateContainsFold(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldContainsFold(FieldFromState, v))
}

// ToStateEQ applies the EQ predicate on the "to_state" field.
func ToStateEQ(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldToState, v))
}

// ToStateNEQ applies the NEQ predicate on the "to_state" field.
func ToStateNEQ(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNEQ(FieldToState, v))
}

// ToStateIn applies the In predicate on the "to_state" field.
func ToStateIn(vs ...string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldIn(FieldToState, vs...))
}

// ToStateNotIn applies the NotIn predicate on the "to_state" field.
func ToStateNotIn(vs ...string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNotIn(FieldToState, vs...))
}

// ToStateGT applies the GT predicate on the "to_state" field.
func ToStateGT(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGT(FieldToState, v))
}

// ToStateGTE applies the GTE predicate on the "to_state" field.
func ToStateGTE(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGTE(FieldToState, v))
}

// ToStateLT applies the LT predicate on the "to_state" field.
func ToStateLT(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLT(FieldToState, v))
}

// ToStateLTE applies the LTE predicate on the "to_state" field.
func ToStateLTE(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLTE(FieldToState, v))
}

// ToStateContains applies the Contains predicate on the "to_state" field.
func ToStateContains(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldContains(FieldToState, v))
}

// ToStateHasPrefix applies the HasPrefix predicate on the "to_state" field.
func ToStateHasPrefix(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldHasPrefix(FieldToState, v))
}

// ToStateHasSuffix applies the HasSuffix predicate on the "to_state" field.
func ToStateHasSuffix(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldHasSuffix(FieldToState, v))
}

// ToStateEqualFold applies the EqualFold predicate on the "to_state" field.
func ToStateEqualFold(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEqualFold(FieldToState, v))
}

// ToStateContainsFold applies the ContainsFold predicate on the "to_state" field.
func ToStateContainsFold(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldContainsFold(FieldToState, v))
}

// EventEQ applies the EQ predicate on the "event" field.
func EventEQ(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldEvent, v))
}

// EventNEQ applies the NEQ predicate on the "event" field.
func EventNEQ(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNEQ(FieldEvent, v))
}

// EventIn applies the In predicate on the "event" field.
func EventIn(vs ...string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldIn(FieldEvent, vs...))
}

// EventNotIn applies the NotIn predicate on the "event" field.
func EventNotIn(vs ...string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNotIn(FieldEvent, vs...))
}

// EventGT applies the GT predicate on the "event" field.
func EventGT(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGT(FieldEvent, v))
}

// EventGTE applies the GTE predicate on the "event" field.
func EventGTE(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGTE(FieldEvent, v))
}

// EventLT applies the LT predicate on the "event" field.
func EventLT(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLT(FieldEvent, v))
}

// EventLTE applies the LTE predicate on the "event" field.
func EventLTE(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLTE(FieldEvent, v))
}

// EventContains applies the Contains predicate on the "event" field.
func EventContains(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldContains(FieldEvent, v))
}

// EventHasPrefix applies the HasPrefix predicate on the "event" field.
func EventHasPrefix(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldHasPrefix(FieldEvent, v))
}

// EventHasSuffix applies the HasSuffix predicate on the "event" field.
func EventHasSuffix(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldHasSuffix(FieldEvent, v))
}

// EventEqualFold applies the EqualFold predicate on the "event" field.
func EventEqualFold(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEqualFold(FieldEvent, v))
}

// EventContainsFold applies the ContainsFold predicate on the "event" field.
func EventContainsFold(v string) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldContainsFold(FieldEvent, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.StateTransition {
	return predicate.StateTransition(sql.FieldLTE(FieldTimestamp, v))
}

// HasMachine applies the HasEdge predicate on the "machine" edge.
func HasMachine() predicate.StateTransition {
	return predicate.StateTransition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MachineTable, MachineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMachineWith applies the HasEdge predicate on the "machine" edge with a given conditions (other predicates).
func HasMachineWith(preds ...predicate.StateMachine) predicate.StateTransition {
	return predicate.StateTransition(func(s *sql.Selector) {
		step := newMachineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StateTransition) predicate.StateTransition {
	return predicate.StateTransition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StateTransition) predicate.StateTransition {
	return predicate.StateTransition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StateTransition) predicate.StateTransition {
	return predicate.StateTransition(sql.NotPredicates(p))
}
