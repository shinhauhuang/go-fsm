// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/shinhauhuang/go-fsm/ent/statemachine"
	"github.com/shinhauhuang/go-fsm/ent/statetransition"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StateTransition is the model entity for the StateTransition schema.
type StateTransition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FromState holds the value of the "from_state" field.
	FromState string `json:"from_state,omitempty"`
	// ToState holds the value of the "to_state" field.
	ToState string `json:"to_state,omitempty"`
	// Event holds the value of the "event" field.
	Event string `json:"event,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StateTransitionQuery when eager-loading is set.
	Edges                 StateTransitionEdges `json:"edges"`
	state_machine_history *int
	selectValues          sql.SelectValues
}

// StateTransitionEdges holds the relations/edges for other nodes in the graph.
type StateTransitionEdges struct {
	// Machine holds the value of the machine edge.
	Machine *StateMachine `json:"machine,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MachineOrErr returns the Machine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StateTransitionEdges) MachineOrErr() (*StateMachine, error) {
	if e.Machine != nil {
		return e.Machine, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: statemachine.Label}
	}
	return nil, &NotLoadedError{edge: "machine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StateTransition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statetransition.FieldID:
			values[i] = new(sql.NullInt64)
		case statetransition.FieldFromState, statetransition.FieldToState, statetransition.FieldEvent:
			values[i] = new(sql.NullString)
		case statetransition.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case statetransition.ForeignKeys[0]: // state_machine_history
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StateTransition fields.
func (st *StateTransition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statetransition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case statetransition.FieldFromState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_state", values[i])
			} else if value.Valid {
				st.FromState = value.String
			}
		case statetransition.FieldToState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_state", values[i])
			} else if value.Valid {
				st.ToState = value.String
			}
		case statetransition.FieldEvent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event", values[i])
			} else if value.Valid {
				st.Event = value.String
			}
		case statetransition.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				st.Timestamp = value.Time
			}
		case statetransition.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field state_machine_history", value)
			} else if value.Valid {
				st.state_machine_history = new(int)
				*st.state_machine_history = int(value.Int64)
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StateTransition.
// This includes values selected through modifiers, order, etc.
func (st *StateTransition) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryMachine queries the "machine" edge of the StateTransition entity.
func (st *StateTransition) QueryMachine() *StateMachineQuery {
	return NewStateTransitionClient(st.config).QueryMachine(st)
}

// Update returns a builder for updating this StateTransition.
// Note that you need to call StateTransition.Unwrap() before calling this method if this StateTransition
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *StateTransition) Update() *StateTransitionUpdateOne {
	return NewStateTransitionClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the StateTransition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *StateTransition) Unwrap() *StateTransition {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: StateTransition is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *StateTransition) String() string {
	var builder strings.Builder
	builder.WriteString("StateTransition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("from_state=")
	builder.WriteString(st.FromState)
	builder.WriteString(", ")
	builder.WriteString("to_state=")
	builder.WriteString(st.ToState)
	builder.WriteString(", ")
	builder.WriteString("event=")
	builder.WriteString(st.Event)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(st.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StateTransitions is a parsable slice of StateTransition.
type StateTransitions []*StateTransition
