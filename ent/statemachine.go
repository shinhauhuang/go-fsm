// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-fsm/ent/statemachine"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StateMachine is the model entity for the StateMachine schema.
type StateMachine struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MachineID holds the value of the "machine_id" field.
	MachineID string `json:"machine_id,omitempty"`
	// CurrentState holds the value of the "current_state" field.
	CurrentState string `json:"current_state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StateMachineQuery when eager-loading is set.
	Edges        StateMachineEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StateMachineEdges holds the relations/edges for other nodes in the graph.
type StateMachineEdges struct {
	// History holds the value of the history edge.
	History []*StateTransition `json:"history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HistoryOrErr returns the History value or an error if the edge
// was not loaded in eager-loading.
func (e StateMachineEdges) HistoryOrErr() ([]*StateTransition, error) {
	if e.loadedTypes[0] {
		return e.History, nil
	}
	return nil, &NotLoadedError{edge: "history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StateMachine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statemachine.FieldID:
			values[i] = new(sql.NullInt64)
		case statemachine.FieldMachineID, statemachine.FieldCurrentState:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StateMachine fields.
func (sm *StateMachine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statemachine.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int(value.Int64)
		case statemachine.FieldMachineID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field machine_id", values[i])
			} else if value.Valid {
				sm.MachineID = value.String
			}
		case statemachine.FieldCurrentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_state", values[i])
			} else if value.Valid {
				sm.CurrentState = value.String
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StateMachine.
// This includes values selected through modifiers, order, etc.
func (sm *StateMachine) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// QueryHistory queries the "history" edge of the StateMachine entity.
func (sm *StateMachine) QueryHistory() *StateTransitionQuery {
	return NewStateMachineClient(sm.config).QueryHistory(sm)
}

// Update returns a builder for updating this StateMachine.
// Note that you need to call StateMachine.Unwrap() before calling this method if this StateMachine
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *StateMachine) Update() *StateMachineUpdateOne {
	return NewStateMachineClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the StateMachine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *StateMachine) Unwrap() *StateMachine {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: StateMachine is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *StateMachine) String() string {
	var builder strings.Builder
	builder.WriteString("StateMachine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("machine_id=")
	builder.WriteString(sm.MachineID)
	builder.WriteString(", ")
	builder.WriteString("current_state=")
	builder.WriteString(sm.CurrentState)
	builder.WriteByte(')')
	return builder.String()
}

// StateMachines is a parsable slice of StateMachine.
type StateMachines []*StateMachine
