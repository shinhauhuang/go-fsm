// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-fsm/ent/predicate"
	"go-fsm/ent/statemachine"
	"go-fsm/ent/statetransition"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StateMachineUpdate is the builder for updating StateMachine entities.
type StateMachineUpdate struct {
	config
	hooks    []Hook
	mutation *StateMachineMutation
}

// Where appends a list predicates to the StateMachineUpdate builder.
func (smu *StateMachineUpdate) Where(ps ...predicate.StateMachine) *StateMachineUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetMachineID sets the "machine_id" field.
func (smu *StateMachineUpdate) SetMachineID(s string) *StateMachineUpdate {
	smu.mutation.SetMachineID(s)
	return smu
}

// SetNillableMachineID sets the "machine_id" field if the given value is not nil.
func (smu *StateMachineUpdate) SetNillableMachineID(s *string) *StateMachineUpdate {
	if s != nil {
		smu.SetMachineID(*s)
	}
	return smu
}

// SetCurrentState sets the "current_state" field.
func (smu *StateMachineUpdate) SetCurrentState(s string) *StateMachineUpdate {
	smu.mutation.SetCurrentState(s)
	return smu
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (smu *StateMachineUpdate) SetNillableCurrentState(s *string) *StateMachineUpdate {
	if s != nil {
		smu.SetCurrentState(*s)
	}
	return smu
}

// AddHistoryIDs adds the "history" edge to the StateTransition entity by IDs.
func (smu *StateMachineUpdate) AddHistoryIDs(ids ...int) *StateMachineUpdate {
	smu.mutation.AddHistoryIDs(ids...)
	return smu
}

// AddHistory adds the "history" edges to the StateTransition entity.
func (smu *StateMachineUpdate) AddHistory(s ...*StateTransition) *StateMachineUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddHistoryIDs(ids...)
}

// Mutation returns the StateMachineMutation object of the builder.
func (smu *StateMachineUpdate) Mutation() *StateMachineMutation {
	return smu.mutation
}

// ClearHistory clears all "history" edges to the StateTransition entity.
func (smu *StateMachineUpdate) ClearHistory() *StateMachineUpdate {
	smu.mutation.ClearHistory()
	return smu
}

// RemoveHistoryIDs removes the "history" edge to StateTransition entities by IDs.
func (smu *StateMachineUpdate) RemoveHistoryIDs(ids ...int) *StateMachineUpdate {
	smu.mutation.RemoveHistoryIDs(ids...)
	return smu
}

// RemoveHistory removes "history" edges to StateTransition entities.
func (smu *StateMachineUpdate) RemoveHistory(s ...*StateTransition) *StateMachineUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *StateMachineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *StateMachineUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *StateMachineUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *StateMachineUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *StateMachineUpdate) check() error {
	if v, ok := smu.mutation.MachineID(); ok {
		if err := statemachine.MachineIDValidator(v); err != nil {
			return &ValidationError{Name: "machine_id", err: fmt.Errorf(`ent: validator failed for field "StateMachine.machine_id": %w`, err)}
		}
	}
	if v, ok := smu.mutation.CurrentState(); ok {
		if err := statemachine.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "StateMachine.current_state": %w`, err)}
		}
	}
	return nil
}

func (smu *StateMachineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(statemachine.Table, statemachine.Columns, sqlgraph.NewFieldSpec(statemachine.FieldID, field.TypeInt))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.MachineID(); ok {
		_spec.SetField(statemachine.FieldMachineID, field.TypeString, value)
	}
	if value, ok := smu.mutation.CurrentState(); ok {
		_spec.SetField(statemachine.FieldCurrentState, field.TypeString, value)
	}
	if smu.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statemachine.HistoryTable,
			Columns: []string{statemachine.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statetransition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !smu.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statemachine.HistoryTable,
			Columns: []string{statemachine.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statetransition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statemachine.HistoryTable,
			Columns: []string{statemachine.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statetransition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statemachine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// StateMachineUpdateOne is the builder for updating a single StateMachine entity.
type StateMachineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StateMachineMutation
}

// SetMachineID sets the "machine_id" field.
func (smuo *StateMachineUpdateOne) SetMachineID(s string) *StateMachineUpdateOne {
	smuo.mutation.SetMachineID(s)
	return smuo
}

// SetNillableMachineID sets the "machine_id" field if the given value is not nil.
func (smuo *StateMachineUpdateOne) SetNillableMachineID(s *string) *StateMachineUpdateOne {
	if s != nil {
		smuo.SetMachineID(*s)
	}
	return smuo
}

// SetCurrentState sets the "current_state" field.
func (smuo *StateMachineUpdateOne) SetCurrentState(s string) *StateMachineUpdateOne {
	smuo.mutation.SetCurrentState(s)
	return smuo
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (smuo *StateMachineUpdateOne) SetNillableCurrentState(s *string) *StateMachineUpdateOne {
	if s != nil {
		smuo.SetCurrentState(*s)
	}
	return smuo
}

// AddHistoryIDs adds the "history" edge to the StateTransition entity by IDs.
func (smuo *StateMachineUpdateOne) AddHistoryIDs(ids ...int) *StateMachineUpdateOne {
	smuo.mutation.AddHistoryIDs(ids...)
	return smuo
}

// AddHistory adds the "history" edges to the StateTransition entity.
func (smuo *StateMachineUpdateOne) AddHistory(s ...*StateTransition) *StateMachineUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddHistoryIDs(ids...)
}

// Mutation returns the StateMachineMutation object of the builder.
func (smuo *StateMachineUpdateOne) Mutation() *StateMachineMutation {
	return smuo.mutation
}

// ClearHistory clears all "history" edges to the StateTransition entity.
func (smuo *StateMachineUpdateOne) ClearHistory() *StateMachineUpdateOne {
	smuo.mutation.ClearHistory()
	return smuo
}

// RemoveHistoryIDs removes the "history" edge to StateTransition entities by IDs.
func (smuo *StateMachineUpdateOne) RemoveHistoryIDs(ids ...int) *StateMachineUpdateOne {
	smuo.mutation.RemoveHistoryIDs(ids...)
	return smuo
}

// RemoveHistory removes "history" edges to StateTransition entities.
func (smuo *StateMachineUpdateOne) RemoveHistory(s ...*StateTransition) *StateMachineUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveHistoryIDs(ids...)
}

// Where appends a list predicates to the StateMachineUpdate builder.
func (smuo *StateMachineUpdateOne) Where(ps ...predicate.StateMachine) *StateMachineUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *StateMachineUpdateOne) Select(field string, fields ...string) *StateMachineUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated StateMachine entity.
func (smuo *StateMachineUpdateOne) Save(ctx context.Context) (*StateMachine, error) {
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *StateMachineUpdateOne) SaveX(ctx context.Context) *StateMachine {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *StateMachineUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *StateMachineUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *StateMachineUpdateOne) check() error {
	if v, ok := smuo.mutation.MachineID(); ok {
		if err := statemachine.MachineIDValidator(v); err != nil {
			return &ValidationError{Name: "machine_id", err: fmt.Errorf(`ent: validator failed for field "StateMachine.machine_id": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.CurrentState(); ok {
		if err := statemachine.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "StateMachine.current_state": %w`, err)}
		}
	}
	return nil
}

func (smuo *StateMachineUpdateOne) sqlSave(ctx context.Context) (_node *StateMachine, err error) {
	if err := smuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(statemachine.Table, statemachine.Columns, sqlgraph.NewFieldSpec(statemachine.FieldID, field.TypeInt))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StateMachine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statemachine.FieldID)
		for _, f := range fields {
			if !statemachine.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statemachine.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.MachineID(); ok {
		_spec.SetField(statemachine.FieldMachineID, field.TypeString, value)
	}
	if value, ok := smuo.mutation.CurrentState(); ok {
		_spec.SetField(statemachine.FieldCurrentState, field.TypeString, value)
	}
	if smuo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statemachine.HistoryTable,
			Columns: []string{statemachine.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statetransition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !smuo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statemachine.HistoryTable,
			Columns: []string{statemachine.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statetransition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statemachine.HistoryTable,
			Columns: []string{statemachine.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statetransition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StateMachine{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statemachine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
